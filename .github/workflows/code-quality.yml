name: 代码质量与测试

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:  # 允许手动触发

permissions:
  contents: read
  pull-requests: write  # 用于评论PR

jobs:
  code-quality:
    name: 代码质量检查
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史记录用于代码覆盖率比较
      
      - name: 设置Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pylint pytest pytest-cov flake8 bandit safety mypy black isort pre-commit
      
      # 构建缓存优化
      - name: 缓存预提交环境
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
      
      # 代码格式检查
      - name: 检查代码格式
        id: code_style
        run: |
          mkdir -p reports
          
          echo "### 执行Black代码格式检查" | tee -a reports/code_style.md
          black --check --diff src/ tests/ 2>&1 | tee -a reports/code_style.md || true
          
          echo -e "\n### 执行isort导入排序检查" | tee -a reports/code_style.md
          isort --check --diff src/ tests/ 2>&1 | tee -a reports/code_style.md || true
          
          echo -e "\n### 执行Flake8代码规范检查" | tee -a reports/code_style.md
          flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics 2>&1 | tee -a reports/code_style.md || true
      
      # 代码质量检查
      - name: 执行Pylint代码分析
        id: pylint
        run: |
          mkdir -p reports
          echo "### Pylint代码质量分析" > reports/pylint.md
          pylint --rcfile=.pylintrc --output-format=text src/ > reports/pylint.txt || true
          echo '```' >> reports/pylint.md
          cat reports/pylint.txt >> reports/pylint.md
          echo '```' >> reports/pylint.md
          
          # 提取Pylint评分
          score=$(grep -oP 'Your code has been rated at \K[0-9.]+' reports/pylint.txt || echo "0.0")
          echo "PYLINT_SCORE=$score" >> $GITHUB_ENV
          echo "pylint_score=$score" >> $GITHUB_OUTPUT
      
      # 类型检查
      - name: 执行MyPy类型检查
        id: type_check
        run: |
          mkdir -p reports
          echo "### MyPy类型检查" > reports/mypy.md
          mypy src/ > reports/mypy.txt || true
          echo '```' >> reports/mypy.md
          cat reports/mypy.txt >> reports/mypy.md
          echo '```' >> reports/mypy.md
      
      # 安全扫描
      - name: 执行Bandit安全扫描
        id: security_scan
        run: |
          mkdir -p reports
          echo "### Bandit安全扫描" > reports/bandit.md
          bandit -r src/ -f txt > reports/bandit.txt || true
          echo '```' >> reports/bandit.md
          cat reports/bandit.txt >> reports/bandit.md
          echo '```' >> reports/bandit.md
      
      # 依赖安全检查
      - name: 检查依赖安全性
        id: dependency_check
        run: |
          mkdir -p reports
          echo "### 依赖安全检查" > reports/safety.md
          safety check -r requirements.txt --output text > reports/safety.txt || true
          echo '```' >> reports/safety.md
          cat reports/safety.txt >> reports/safety.md
          echo '```' >> reports/safety.md
  
  test:
    name: 自动化测试
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      
      - name: 设置Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
      
      # 执行测试和覆盖率分析
      - name: 运行测试和覆盖率分析
        id: test_coverage
        run: |
          mkdir -p reports
          
          # 检查tests目录是否存在，不存在则创建占位测试
          if [ ! -d "tests" ]; then
            echo "未找到tests目录，创建占位测试..."
            mkdir -p tests
            cat > tests/test_placeholder.py << 'EOF'
          import unittest

          class PlaceholderTest(unittest.TestCase):
              def test_placeholder(self):
                  """占位测试，确保测试流程可以正常运行"""
                  self.assertTrue(True)
          EOF
          fi
          
          # 创建src目录（如果不存在）
          if [ ! -d "src" ]; then
            mkdir -p src
            echo "# 占位模块" > src/__init__.py
          fi
          
          # 生成覆盖率报告
          echo "### 单元测试结果和代码覆盖率" > reports/coverage.md
          python -m pytest tests/ --cov=src --cov-report=term --cov-report=xml:reports/coverage.xml -v | tee reports/pytest.txt
          
          # 提取测试统计信息
          total_tests=$(grep -oP 'collected \K[0-9]+' reports/pytest.txt || echo "0")
          echo "TOTAL_TESTS=$total_tests" >> $GITHUB_ENV
          echo "total_tests=$total_tests" >> $GITHUB_OUTPUT
          
          # 添加测试结果到报告
          echo '```' >> reports/coverage.md
          cat reports/pytest.txt >> reports/coverage.md
          echo '```' >> reports/coverage.md
          
          # 生成HTML覆盖率报告
          python -m pytest tests/ --cov=src --cov-report=html:reports/coverage_html

      - name: 生成覆盖率徽章
        id: coverage_badge
        run: |
          # 提取覆盖率数值
          if [ -f "reports/coverage.xml" ]; then
            coverage=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('reports/coverage.xml'); root = tree.getroot(); print(root.attrib['line-rate'])")
            coverage_pct=$(python -c "print(round(float('${coverage}') * 100, 2))")
          else
            coverage_pct="0.00"
          fi
          
          echo "代码覆盖率: ${coverage_pct}%" >> reports/coverage.md
          echo "COVERAGE=$coverage_pct" >> $GITHUB_ENV
          echo "coverage=$coverage_pct" >> $GITHUB_OUTPUT
          
      # 上传测试报告
      - name: 上传测试报告
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: reports/
  
  changelog:
    name: 更新日志格式化
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史记录用于日志生成
      
      - name: 生成格式化的更新日志
        id: format_changelog
        run: |
          mkdir -p reports
          
          echo "### 自动格式化的更新日志" > reports/changelog.md
          echo "" >> reports/changelog.md
          
          # 获取最新的提交记录，并按类型分类
          echo "## 最近更新" >> reports/changelog.md
          echo "" >> reports/changelog.md
          
          # 分析提交信息类型
          echo "### 新增功能" >> reports/changelog.md
          git log --pretty=format:"- %s (%ad)" --date=short | grep -i "^新增：\|^feature:\|^feat:" | head -10 >> reports/changelog.md || true
          echo "" >> reports/changelog.md
          
          echo "### 问题修复" >> reports/changelog.md
          git log --pretty=format:"- %s (%ad)" --date=short | grep -i "^修复：\|^fix:" | head -10 >> reports/changelog.md || true
          echo "" >> reports/changelog.md
          
          echo "### 功能改进" >> reports/changelog.md
          git log --pretty=format:"- %s (%ad)" --date=short | grep -i "^改进：\|^improve:\|^enhancement:" | head -10 >> reports/changelog.md || true
          echo "" >> reports/changelog.md
      
      # 上传更新日志报告
      - name: 上传更新日志报告
        uses: actions/upload-artifact@v4
        with:
          name: changelog-reports
          path: reports/
  
  report:
    name: 生成综合报告
    runs-on: ubuntu-latest
    needs: [code-quality, test, changelog]
    outputs:
      pylint_score: ${{ steps.set_outputs.outputs.pylint_score }}
      coverage: ${{ steps.set_outputs.outputs.coverage }}
      total_tests: ${{ steps.set_outputs.outputs.total_tests }}
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      
      - name: 下载代码质量报告
        uses: actions/download-artifact@v4
        with:
          name: code-quality-reports
          path: reports/code-quality
      
      - name: 下载测试报告
        uses: actions/download-artifact@v4
        with:
          name: test-reports
          path: reports/test
          
      - name: 下载更新日志报告
        uses: actions/download-artifact@v4
        with:
          name: changelog-reports
          path: reports/changelog
      
      # 设置输出变量
      - name: 获取报告数据
        id: set_outputs
        run: |
          mkdir -p reports/merged
          
          # 读取Pylint分数
          if [ -f "reports/code-quality/pylint.txt" ]; then
            PYLINT_SCORE=$(grep -oP 'Your code has been rated at \K[0-9.]+' reports/code-quality/pylint.txt || echo "0.0")
          else
            PYLINT_SCORE="0.0"
          fi
          
          # 读取测试数据
          if [ -f "reports/test/pytest.txt" ]; then
            TOTAL_TESTS=$(grep -oP 'collected \K[0-9]+' reports/test/pytest.txt || echo "0")
          else
            TOTAL_TESTS="0"
          fi
          
          # 读取覆盖率数据
          if [ -f "reports/test/coverage.xml" ]; then
            COVERAGE=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('reports/test/coverage.xml'); root = tree.getroot(); print(round(float(root.attrib['line-rate']) * 100, 2))" 2>/dev/null || echo "0.00")
          else
            COVERAGE="0.00"
          fi
          
          # 设置输出变量
          echo "pylint_score=$PYLINT_SCORE" >> $GITHUB_OUTPUT
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
          echo "total_tests=$TOTAL_TESTS" >> $GITHUB_OUTPUT
          
          # 合并报告
          cat << EOF > reports/merged/quality-report.md
          # GestroKey 代码质量与测试报告
          
          生成时间: $(date '+%Y-%m-%d %H:%M:%S %Z')
          
          ## 代码质量检查
          
          - Pylint 得分: ${PYLINT_SCORE}/10
          - 代码覆盖率: ${COVERAGE}%
          - 测试用例总数: ${TOTAL_TESTS}
          
          ## 检查结果汇总
          
          EOF
          
          # 合并各个报告到一个文件
          if [ -f "reports/code-quality/pylint.md" ]; then
            cat reports/code-quality/pylint.md >> reports/merged/quality-report.md
            echo "" >> reports/merged/quality-report.md
          fi
          
          if [ -f "reports/test/coverage.md" ]; then
            cat reports/test/coverage.md >> reports/merged/quality-report.md
            echo "" >> reports/merged/quality-report.md
          fi
          
          if [ -f "reports/test/mypy.md" ]; then
            cat reports/test/mypy.md >> reports/merged/quality-report.md
            echo "" >> reports/merged/quality-report.md
          fi
          
          if [ -f "reports/code-quality/bandit.md" ]; then
            cat reports/code-quality/bandit.md >> reports/merged/quality-report.md
            echo "" >> reports/merged/quality-report.md
          fi
          
          if [ -f "reports/changelog/changelog.md" ]; then
            cat reports/changelog/changelog.md >> reports/merged/quality-report.md
          fi
      
      # 上传综合报告
      - name: 上传综合报告
        uses: actions/upload-artifact@v4
        with:
          name: code-quality-report
          path: reports/merged/quality-report.md
      
      # 保存所有单独报告
      - name: 保存所有报告
        uses: actions/upload-artifact@v4
        with:
          name: all-reports
          path: reports/
          
      # 如果是PR，添加评论
      - name: 在PR上添加评论
        if: github.event_name == 'pull_request'
        run: |
          PR_NUMBER=$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')
          
          # 创建简短的摘要评论
          cat << EOF > pr-comment.md
          ## 代码质量检查结果
          
          - Pylint 得分: ${{ steps.set_outputs.outputs.pylint_score }}/10
          - 代码覆盖率: ${{ steps.set_outputs.outputs.coverage }}%
          - 测试用例: ${{ steps.set_outputs.outputs.total_tests }}
          
          详细报告已作为工作流运行结果上传。
          EOF
          
          # 使用GitHub CLI添加评论
          gh pr comment $PR_NUMBER -F pr-comment.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 