name: 代码质量与测试

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:  # 允许手动触发

permissions:
  contents: read
  pull-requests: write  # 用于评论PR

jobs:
  code-quality:
    name: 代码质量检查
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史记录用于代码覆盖率比较
      
      - name: 设置Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pylint pytest pytest-cov flake8 bandit safety mypy black isort pre-commit
      
      # 构建缓存优化
      - name: 缓存预提交环境
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
      
      # 代码格式检查
      - name: 检查代码格式
        id: code_style
        run: |
          mkdir -p reports
          
          echo "### 执行Black代码格式检查" | tee -a reports/code_style.md
          black --check --diff src/ tests/ 2>&1 | tee -a reports/code_style.md || true
          
          echo -e "\n### 执行isort导入排序检查" | tee -a reports/code_style.md
          isort --check --diff src/ tests/ 2>&1 | tee -a reports/code_style.md || true
          
          echo -e "\n### 执行Flake8代码规范检查" | tee -a reports/code_style.md
          flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics 2>&1 | tee -a reports/code_style.md || true
      
      # 代码质量检查
      - name: 执行Pylint代码分析
        id: pylint
        run: |
          mkdir -p reports
          echo "### Pylint代码质量分析" > reports/pylint.md
          pylint --rcfile=.pylintrc --output-format=text src/ > reports/pylint.txt || true
          echo '```' >> reports/pylint.md
          cat reports/pylint.txt >> reports/pylint.md
          echo '```' >> reports/pylint.md
          
          # 提取Pylint评分
          score=$(grep -oP 'Your code has been rated at \K[0-9.]+' reports/pylint.txt || echo "0.0")
          echo "PYLINT_SCORE=$score" >> $GITHUB_ENV
      
      # 类型检查
      - name: 执行MyPy类型检查
        id: type_check
        run: |
          mkdir -p reports
          echo "### MyPy类型检查" > reports/mypy.md
          mypy src/ > reports/mypy.txt || true
          echo '```' >> reports/mypy.md
          cat reports/mypy.txt >> reports/mypy.md
          echo '```' >> reports/mypy.md
      
      # 安全扫描
      - name: 执行Bandit安全扫描
        id: security_scan
        run: |
          mkdir -p reports
          echo "### Bandit安全扫描" > reports/bandit.md
          bandit -r src/ -f txt > reports/bandit.txt || true
          echo '```' >> reports/bandit.md
          cat reports/bandit.txt >> reports/bandit.md
          echo '```' >> reports/bandit.md
      
      # 依赖安全检查
      - name: 检查依赖安全性
        id: dependency_check
        run: |
          mkdir -p reports
          echo "### 依赖安全检查" > reports/safety.md
          safety check -r requirements.txt --output text > reports/safety.txt || true
          echo '```' >> reports/safety.md
          cat reports/safety.txt >> reports/safety.md
          echo '```' >> reports/safety.md
  
  test:
    name: 自动化测试
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      
      - name: 设置Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
      
      # 执行测试和覆盖率分析
      - name: 运行测试和覆盖率分析
        id: test_coverage
        run: |
          mkdir -p reports
          
          # 生成覆盖率报告
          echo "### 单元测试结果和代码覆盖率" > reports/coverage.md
          python -m pytest tests/ --cov=src --cov-report=term --cov-report=xml:reports/coverage.xml -v | tee reports/pytest.txt
          
          # 提取测试统计信息
          total_tests=$(grep -oP 'collected \K[0-9]+' reports/pytest.txt || echo "0")
          echo "TOTAL_TESTS=$total_tests" >> $GITHUB_ENV
          
          # 添加测试结果到报告
          echo '```' >> reports/coverage.md
          cat reports/pytest.txt >> reports/coverage.md
          echo '```' >> reports/coverage.md
          
          # 生成HTML覆盖率报告
          python -m pytest tests/ --cov=src --cov-report=html:reports/coverage_html

      - name: 生成覆盖率徽章
        id: coverage_badge
        run: |
          # 提取覆盖率数值
          coverage=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('reports/coverage.xml'); root = tree.getroot(); print(root.attrib['line-rate'])")
          coverage_pct=$(python -c "print(round(float('${coverage}') * 100, 2))")
          
          echo "代码覆盖率: ${coverage_pct}%" >> reports/coverage.md
          echo "COVERAGE=$coverage_pct" >> $GITHUB_ENV
  
  changelog:
    name: 更新日志格式化
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史记录用于日志生成
      
      - name: 生成格式化的更新日志
        id: format_changelog
        run: |
          mkdir -p reports
          
          echo "### 自动格式化的更新日志" > reports/changelog.md
          echo "" >> reports/changelog.md
          
          # 获取最新的提交记录，并按类型分类
          echo "## 最近更新" >> reports/changelog.md
          echo "" >> reports/changelog.md
          
          # 分析提交信息类型
          echo "### 新增功能" >> reports/changelog.md
          git log --pretty=format:"- %s (%ad)" --date=short | grep -i "^新增：\|^feature:\|^feat:" | head -10 >> reports/changelog.md || true
          echo "" >> reports/changelog.md
          
          echo "### 问题修复" >> reports/changelog.md
          git log --pretty=format:"- %s (%ad)" --date=short | grep -i "^修复：\|^fix:" | head -10 >> reports/changelog.md || true
          echo "" >> reports/changelog.md
          
          echo "### 功能改进" >> reports/changelog.md
          git log --pretty=format:"- %s (%ad)" --date=short | grep -i "^改进：\|^improve:\|^enhancement:" | head -10 >> reports/changelog.md || true
          echo "" >> reports/changelog.md
  
  report:
    name: 生成综合报告
    runs-on: ubuntu-latest
    needs: [code-quality, test, changelog]
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      
      - name: 下载所有报告
        uses: actions/download-artifact@v4
        with:
          path: all-reports
      
      - name: 合并报告
        run: |
          mkdir -p reports
          
          # 创建综合报告
          cat << EOF > reports/quality-report.md
          # GestroKey 代码质量与测试报告
          
          生成时间: $(date '+%Y-%m-%d %H:%M:%S %Z')
          
          ## 代码质量检查
          
          - Pylint 得分: ${{ env.PYLINT_SCORE || '未获取' }}/10
          - 代码覆盖率: ${{ env.COVERAGE || '未获取' }}%
          - 测试用例总数: ${{ env.TOTAL_TESTS || '未获取' }}
          
          ## 检查结果汇总
          
          EOF
          
          # 将各个报告合并到一起
          if [ -d "all-reports" ]; then
            find all-reports -type f -name "*.md" -exec cat {} \; >> reports/quality-report.md
          else
            echo "无法找到报告文件" >> reports/quality-report.md
          fi
      
      # 上传综合报告
      - name: 上传报告
        uses: actions/upload-artifact@v4
        with:
          name: code-quality-report
          path: reports/quality-report.md
      
      # 保存所有单独报告
      - name: 保存所有报告
        uses: actions/upload-artifact@v4
        with:
          name: all-reports
          path: reports/
          
      # 如果是PR，添加评论
      - name: 在PR上添加评论
        if: github.event_name == 'pull_request'
        run: |
          PR_NUMBER=$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')
          
          # 创建简短的摘要评论
          cat << EOF > pr-comment.md
          ## 代码质量检查结果
          
          - Pylint 得分: ${{ env.PYLINT_SCORE || '未获取' }}/10
          - 代码覆盖率: ${{ env.COVERAGE || '未获取' }}%
          - 测试用例: ${{ env.TOTAL_TESTS || '未获取' }}
          
          详细报告已作为工作流运行结果上传。
          EOF
          
          # 使用GitHub CLI添加评论
          gh pr comment $PR_NUMBER -F pr-comment.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 