name: Build Windows Executable with Nuitka

on:
  # 手动触发配置
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type (debug/release)'
        required: false
        default: 'release'
        type: choice
        options:
          - release
          - debug

  # 代码推送时也触发（可选）
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          architecture: 'x64'
          cache: 'pip'
          cache-dependency-path: '**/requirements.txt'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install nuitka ordered-set zstandard
          pip install -r requirements.txt

      - name: Build with Nuitka
        run: |
          $buildFlags = ""
          if ("${{ github.event.inputs.build_type }}" -eq "debug") {
            $buildFlags = "--debug"
          }
          
          python -m nuitka --standalone --onefile --mingw64 `
            --windows-disable-console --show-progress --show-memory `
            --plugin-enable=tk-inter --output-dir=dist `
            --windows-icon-from-ico=assets/icon.ico `
            $buildFlags src/main.py

      - name: Prepare release package
        run: |
          mkdir release
          copy dist\main.exe release\app.exe
          # 包含其他资源文件（如图片、配置文件等）
          # copy -Recurse assets\ release\assets\
          
          # 创建带版本号的压缩包
          $version = (Get-Content version.txt).Trim()
          7z a -tzip release/app-v$version-${{ github.event.inputs.build_type }}.zip .\release\*

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-app-package
          path: release/*.zip
          retention-days: 7
