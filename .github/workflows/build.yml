name: GestroKey CI/CD

on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      skip_build:
        description: '跳过实际编译过程 (true/false)'
        required: false
        default: 'false'
        type: boolean

# 为工作流添加权限
permissions:
  contents: write
  packages: read
  issues: read
  pull-requests: read

jobs:
  # 读取版本信息作为独立任务
  get-version:
    name: 读取版本信息
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version_info.outputs.VERSION }}
      version_type: ${{ steps.version_info.outputs.VERSION_TYPE }}
      is_prerelease: ${{ steps.version_info.outputs.IS_PRERELEASE }}
      release_name: ${{ steps.version_info.outputs.RELEASE_NAME }}
      repo_url: ${{ steps.version_info.outputs.REPO_URL }}
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: 读取版本信息
        id: version_info
        run: |
          # 创建临时脚本读取版本信息
          cat << EOF > temp_version_script.py
          import sys
          from src.version import VERSION, CURRENT_VERSION_TYPE, VERSION_TYPE_RELEASE, VERSION_TYPE_PREVIEW, VERSION_TYPE_DEVELOPMENT
          
          # 尝试获取仓库URL，如果存在的话
          repo_url = ""
          try:
              from src.version import REPO_URL
              repo_url = REPO_URL
          except ImportError:
              repo_url = "https://github.com/${{ github.repository }}"
          
          # 输出版本号
          print(VERSION)
          
          # 输出版本类型（英文）
          if CURRENT_VERSION_TYPE == "未发布版":
              print("development")
          elif CURRENT_VERSION_TYPE == "预览版":
              print("preview")
          elif CURRENT_VERSION_TYPE == "正式版":
              print("release")
          else:
              print("unknown")
              
          # 输出仓库URL
          print(repo_url)
          EOF
          
          # 执行脚本并读取输出
          IFS=$'\n' read -d '' -ra outputs < <(python temp_version_script.py && printf '\0')
          version="${outputs[0]}"
          version_type="${outputs[1]}"
          repo_url="${outputs[2]}"
          
          # 删除临时脚本
          rm temp_version_script.py
          
          # 输出版本信息供后续步骤使用
          echo "VERSION=$version" >> $GITHUB_OUTPUT
          echo "REPO_URL=$repo_url" >> $GITHUB_OUTPUT
          
          # 根据英文版本类型判断要创建的release名称和是否为预览版
          if [ "$version_type" = "development" ]; then
            echo "VERSION_TYPE=Development Version" >> $GITHUB_OUTPUT
            echo "RELEASE_NAME=latest" >> $GITHUB_OUTPUT
            echo "IS_PRERELEASE=true" >> $GITHUB_OUTPUT
          elif [ "$version_type" = "preview" ]; then
            echo "VERSION_TYPE=Preview Version" >> $GITHUB_OUTPUT
            echo "RELEASE_NAME=$version-preview" >> $GITHUB_OUTPUT
            echo "IS_PRERELEASE=true" >> $GITHUB_OUTPUT
          else
            echo "VERSION_TYPE=Release Version" >> $GITHUB_OUTPUT
            echo "RELEASE_NAME=$version" >> $GITHUB_OUTPUT
            echo "IS_PRERELEASE=false" >> $GITHUB_OUTPUT
          fi

  # 使用矩阵构建不同平台和格式的包
  build:
    name: 构建 ${{ matrix.os }} ${{ matrix.package-type }}
    runs-on: ${{ matrix.os }}
    needs: get-version
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        package-type: [installer, standalone, portable]
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install nuitka
          pip install -r requirements.txt

      # Windows特定安装
      - name: Windows - 安装工具
        if: matrix.os == 'windows-latest'
        run: |
          choco install imagemagick -y
          choco install innosetup -y

      # macOS特定安装
      - name: macOS - 安装工具
        if: matrix.os == 'macos-latest'
        run: |
          brew install imagemagick
          brew install create-dmg

      # Linux特定安装
      - name: Linux - 安装工具
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y imagemagick fakeroot

      # 处理图标 - Windows
      - name: Windows - 处理图标
        if: matrix.os == 'windows-latest'
        run: |
          if (-Not (Test-Path -Path "src/assets/images")) {
            mkdir -p src/assets/images
          }
          if (Test-Path -Path src/assets/images/icon.svg) {
            magick src/assets/images/icon.svg -background none -resize 256x256 icon-256.png
            magick src/assets/images/icon.svg -background none -resize 128x128 icon-128.png
            magick src/assets/images/icon.svg -background none -resize 64x64 icon-64.png
            magick src/assets/images/icon.svg -background none -resize 48x48 icon-48.png
            magick src/assets/images/icon.svg -background none -resize 32x32 icon-32.png
            magick src/assets/images/icon.svg -background none -resize 16x16 icon-16.png
            magick icon-256.png icon-128.png icon-64.png icon-48.png icon-32.png icon-16.png src/assets/images/icon.ico
            Remove-Item icon-*.png
          } else {
            Write-Error "缺少图标文件: src/assets/images/icon.svg"
            exit 1
          }

      # 处理图标 - macOS
      - name: macOS - 处理图标
        if: matrix.os == 'macos-latest'
        run: |
          if [ ! -d "src/assets/images" ]; then
            mkdir -p src/assets/images
          fi
          if [ -f src/assets/images/icon.svg ]; then
            mkdir -p iconset
            for size in 16 32 64 128 256 512 1024; do
              convert -background none src/assets/images/icon.svg -resize ${size}x${size} iconset/icon_${size}x${size}.png
            done
            iconutil -c icns -o src/assets/images/icon.icns iconset
            rm -rf iconset
          else
            echo "缺少图标文件: src/assets/images/icon.svg"
            exit 1
          fi

      # 处理图标 - Linux
      - name: Linux - 处理图标
        if: matrix.os == 'ubuntu-latest'
        run: |
          if [ ! -d "src/assets/images" ]; then
            mkdir -p src/assets/images
          fi
          if [ -f src/assets/images/icon.svg ]; then
            convert -background none src/assets/images/icon.svg -resize 256x256 src/assets/images/icon.png
          else
            echo "缺少图标文件: src/assets/images/icon.svg"
            exit 1
          fi

      # 构建多文件便携版
      - name: 构建便携版
        if: matrix.package-type == 'portable'
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            # Windows便携版
            python -m nuitka --standalone --enable-plugin=pyqt6 --include-data-dir=src/assets=assets --windows-icon-from-ico=src/assets/images/icon.ico --output-dir=dist --assume-yes-for-downloads src/main.py
            mkdir -p "dist/GestroKey-${{ needs.get-version.outputs.version }}-Windows-Portable"
            cp -r dist/main.dist/* "dist/GestroKey-${{ needs.get-version.outputs.version }}-Windows-Portable/"
            powershell Compress-Archive -Path "dist/GestroKey-${{ needs.get-version.outputs.version }}-Windows-Portable/*" -DestinationPath "dist/GestroKey-${{ needs.get-version.outputs.version }}-Windows-Portable.zip" -Force
          elif [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            # Linux便携版
            python -m nuitka --standalone --enable-plugin=pyqt6 --include-data-dir=src/assets=assets --output-dir=dist --assume-yes-for-downloads src/main.py
            mkdir -p "dist/GestroKey-${{ needs.get-version.outputs.version }}-Linux-Portable"
            cp -r dist/main.dist/* "dist/GestroKey-${{ needs.get-version.outputs.version }}-Linux-Portable/"
            cd dist && tar -czvf "GestroKey-${{ needs.get-version.outputs.version }}-Linux-Portable.tar.gz" "GestroKey-${{ needs.get-version.outputs.version }}-Linux-Portable"
          else
            # macOS便携版
            python -m nuitka --standalone --enable-plugin=pyqt6 --include-data-dir=src/assets=assets --macos-create-app-bundle --macos-app-icon=src/assets/images/icon.icns --output-dir=dist --assume-yes-for-downloads src/main.py
            mkdir -p "dist/GestroKey-${{ needs.get-version.outputs.version }}-macOS-Portable"
            cp -r dist/main.app "dist/GestroKey-${{ needs.get-version.outputs.version }}-macOS-Portable/"
            cd dist && zip -r "GestroKey-${{ needs.get-version.outputs.version }}-macOS-Portable.zip" "GestroKey-${{ needs.get-version.outputs.version }}-macOS-Portable"
          fi

      # 构建单文件版本
      - name: 构建单文件版
        if: matrix.package-type == 'standalone'
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            # Windows单文件版
            python -m nuitka --onefile --enable-plugin=pyqt6 --include-data-dir=src/assets=assets --windows-icon-from-ico=src/assets/images/icon.ico --output-dir=dist --assume-yes-for-downloads src/main.py
            mv dist/main.exe "dist/GestroKey-${{ needs.get-version.outputs.version }}-Windows-Standalone.exe"
          elif [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            # Linux单文件版
            python -m nuitka --onefile --enable-plugin=pyqt6 --include-data-dir=src/assets=assets --output-dir=dist --assume-yes-for-downloads src/main.py
            mv dist/main.bin "dist/GestroKey-${{ needs.get-version.outputs.version }}-Linux-Standalone"
            chmod +x "dist/GestroKey-${{ needs.get-version.outputs.version }}-Linux-Standalone"
          else
            # macOS单文件版
            python -m nuitka --onefile --enable-plugin=pyqt6 --include-data-dir=src/assets=assets --output-dir=dist --assume-yes-for-downloads src/main.py
            mv dist/main.bin "dist/GestroKey-${{ needs.get-version.outputs.version }}-macOS-Standalone"
            chmod +x "dist/GestroKey-${{ needs.get-version.outputs.version }}-macOS-Standalone"
          fi

      # 构建安装包
      - name: 构建安装包
        if: matrix.package-type == 'installer'
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            # Windows安装包 (Inno Setup)
            python -m nuitka --standalone --enable-plugin=pyqt6 --include-data-dir=src/assets=assets --windows-icon-from-ico=src/assets/images/icon.ico --output-dir=dist --assume-yes-for-downloads src/main.py
            
            # 创建Inno Setup脚本
            cat > installer.iss << 'EOF'
[Setup]
AppName=GestroKey
AppVersion=${{ needs.get-version.outputs.version }}
DefaultDirName={pf}\GestroKey
DefaultGroupName=GestroKey
UninstallDisplayIcon={app}\main.exe
OutputDir=dist
OutputBaseFilename=GestroKey-${{ needs.get-version.outputs.version }}-Windows-Setup

[Files]
Source: "dist\main.dist\*"; DestDir: "{app}"; Flags: recursesubdirs

[Icons]
Name: "{group}\GestroKey"; Filename: "{app}\main.exe"
Name: "{commondesktop}\GestroKey"; Filename: "{app}\main.exe"
EOF
            
            # 编译安装包
            "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" installer.iss
            
          elif [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            # Linux安装包 (DEB)
            python -m nuitka --standalone --enable-plugin=pyqt6 --include-data-dir=src/assets=assets --output-dir=dist --assume-yes-for-downloads src/main.py
            
            # 创建DEB包结构
            mkdir -p dist/deb-package/DEBIAN
            mkdir -p dist/deb-package/usr/local/bin/gestrokey
            mkdir -p dist/deb-package/usr/share/applications
            mkdir -p dist/deb-package/usr/share/icons/hicolor/256x256/apps
            
            # 复制文件
            cp -r dist/main.dist/* dist/deb-package/usr/local/bin/gestrokey/
            cp src/assets/images/icon.png dist/deb-package/usr/share/icons/hicolor/256x256/apps/gestrokey.png
            
            # 创建启动器 - 修复heredoc
            cat > dist/deb-package/usr/share/applications/gestrokey.desktop << 'EOF'
[Desktop Entry]
Type=Application
Name=GestroKey
Comment=鼠标手势控制工具
Exec=/usr/local/bin/gestrokey/main
Icon=gestrokey
Categories=Utility;
EOF
            
            # 创建控制文件 - 修复heredoc
            cat > dist/deb-package/DEBIAN/control << 'EOF'
Package: gestrokey
Version: ${{ needs.get-version.outputs.version }}
Section: utils
Priority: optional
Architecture: amd64
Maintainer: GestroKey Team
Description: 鼠标手势控制工具
 GestroKey允许用户通过鼠标绘制来执行各种操作
EOF
            
            # 构建DEB包
            fakeroot dpkg-deb --build dist/deb-package "dist/GestroKey-${{ needs.get-version.outputs.version }}-Linux-Setup.deb"
            
          else
            # macOS安装包 (DMG)
            python -m nuitka --standalone --enable-plugin=pyqt6 --include-data-dir=src/assets=assets --macos-create-app-bundle --macos-app-icon=src/assets/images/icon.icns --output-dir=dist --assume-yes-for-downloads src/main.py
            
            # 重命名应用
            mv dist/main.app "dist/GestroKey.app"
            
            # 创建DMG - 修复命令格式
            create-dmg \
              --volname "GestroKey" \
              --volicon "src/assets/images/icon.icns" \
              --window-pos 200 120 \
              --window-size 800 400 \
              --icon-size 100 \
              --icon "GestroKey.app" 200 190 \
              --hide-extension "GestroKey.app" \
              --app-drop-link 600 185 \
              "dist/GestroKey-${{ needs.get-version.outputs.version }}-macOS-Setup.dmg" \
              "dist/GestroKey.app"
          fi

      # 上传构建产物
      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: GestroKey-${{ needs.get-version.outputs.version }}-${{ matrix.os }}-${{ matrix.package-type }}
          path: |
            dist/GestroKey-*.exe
            dist/GestroKey-*.zip
            dist/GestroKey-*.dmg
            dist/GestroKey-*.deb
            dist/GestroKey-*.tar.gz
            dist/GestroKey-*-Standalone
            dist/GestroKey-*-Standalone.exe

  # 创建发布
  release:
    name: 创建版本发布
    runs-on: ubuntu-latest
    needs: [get-version, build]
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 下载所有构建产物
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: 列出所有文件
        run: find artifacts -type f | sort

      - name: 生成下载链接表格
        id: generate_table
        run: |
          # 生成包含下载链接的表格
          cat << 'EOF' > release_table.md
# GestroKey ${{ needs.get-version.outputs.version }} ${{ needs.get-version.outputs.version_type }}

## 下载链接

| 操作系统 | 安装包 | 单文件版 | 便携版 |
|---------|--------|---------|-------|
| Windows | [安装程序]($(echo "${{ needs.get-version.outputs.repo_url }}")/releases/download/${{ needs.get-version.outputs.release_name }}/GestroKey-${{ needs.get-version.outputs.version }}-Windows-Setup.exe) | [独立可执行文件]($(echo "${{ needs.get-version.outputs.repo_url }}")/releases/download/${{ needs.get-version.outputs.release_name }}/GestroKey-${{ needs.get-version.outputs.version }}-Windows-Standalone.exe) | [ZIP压缩包]($(echo "${{ needs.get-version.outputs.repo_url }}")/releases/download/${{ needs.get-version.outputs.release_name }}/GestroKey-${{ needs.get-version.outputs.version }}-Windows-Portable.zip) |
| macOS   | [DMG安装镜像]($(echo "${{ needs.get-version.outputs.repo_url }}")/releases/download/${{ needs.get-version.outputs.release_name }}/GestroKey-${{ needs.get-version.outputs.version }}-macOS-Setup.dmg) | [独立可执行文件]($(echo "${{ needs.get-version.outputs.repo_url }}")/releases/download/${{ needs.get-version.outputs.release_name }}/GestroKey-${{ needs.get-version.outputs.version }}-macOS-Standalone) | [ZIP压缩包]($(echo "${{ needs.get-version.outputs.repo_url }}")/releases/download/${{ needs.get-version.outputs.release_name }}/GestroKey-${{ needs.get-version.outputs.version }}-macOS-Portable.zip) |
| Linux   | [DEB安装包]($(echo "${{ needs.get-version.outputs.repo_url }}")/releases/download/${{ needs.get-version.outputs.release_name }}/GestroKey-${{ needs.get-version.outputs.version }}-Linux-Setup.deb) | [独立可执行文件]($(echo "${{ needs.get-version.outputs.repo_url }}")/releases/download/${{ needs.get-version.outputs.release_name }}/GestroKey-${{ needs.get-version.outputs.version }}-Linux-Standalone) | [TAR.GZ压缩包]($(echo "${{ needs.get-version.outputs.repo_url }}")/releases/download/${{ needs.get-version.outputs.release_name }}/GestroKey-${{ needs.get-version.outputs.version }}-Linux-Portable.tar.gz) |

## 系统要求

- **Windows**: Windows 10/11 64位
- **macOS**: macOS 11.0+ (Big Sur及更高版本)
- **Linux**: 主流桌面发行版 (Ubuntu 20.04+, Fedora 36+, Debian 11+)

## 更新说明

此版本由GitHub Actions自动构建于 ${{ github.event.repository.updated_at }}
EOF
          
          echo "TABLE_CONTENT<<EOF" >> $GITHUB_OUTPUT
          cat release_table.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # 检查标签是否存在
      - name: 检查标签是否存在
        id: check_tag
        uses: mukunku/tag-exists-action@v1.4.0
        with:
          tag: ${{ needs.get-version.outputs.release_name }}

      # 删除已存在的release和标签
      - name: 删除已存在的release和标签
        if: steps.check_tag.outputs.exists == 'true'
        run: |
          echo "移除已存在的标签: ${{ needs.get-version.outputs.release_name }}"
          
          # 使用GitHub CLI删除release和标签
          gh release delete ${{ needs.get-version.outputs.release_name }} --yes || echo "Release不存在或无法删除"
          
          # 删除远程标签
          git tag -d ${{ needs.get-version.outputs.release_name }} || echo "本地标签不存在"
          git push --delete origin ${{ needs.get-version.outputs.release_name }} || echo "远程标签不存在或无法删除"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 创建并推送标签
      - name: 创建并推送标签
        run: |
          # 创建标签
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          echo "创建标签: ${{ needs.get-version.outputs.release_name }}"
          git tag -a ${{ needs.get-version.outputs.release_name }} -m "Release ${{ needs.get-version.outputs.release_name }}"
          
          # 推送标签
          git push origin ${{ needs.get-version.outputs.release_name }}

      # 创建Release
      - name: 创建Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ needs.get-version.outputs.release_name }}
          tag_name: ${{ needs.get-version.outputs.release_name }}
          body: ${{ steps.generate_table.outputs.TABLE_CONTENT }}
          prerelease: ${{ needs.get-version.outputs.is_prerelease }}
          files: artifacts/*