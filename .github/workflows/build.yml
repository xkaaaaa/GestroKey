name: GestroKey CI/CD

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      reason:
        description: '触发原因'
        required: false
        default: '手动触发构建'

jobs:
  # 手动触发的Nuitka编译工作流
  nuitka-build:
    name: Nuitka编译
    runs-on: windows-latest
    # 仅在手动触发时运行
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: 安装依赖
        run: |
          # 安装Python依赖
          python -m pip install --upgrade pip
          pip install nuitka
          pip install -r requirements.txt
          
          # 安装ImageMagick
          choco install imagemagick -y

      - name: 构建应用程序
        run: |
          # 1. 准备图标
          New-Item -ItemType Directory -Force -Path src/assets/images | Out-Null
          
          if (-not (Test-Path -Path src/assets/images/icon.svg)) {
              Write-Error "缺少SVG图标文件: src/assets/images/icon.svg"
              exit 1
          }
          
          # 转换SVG到ICO并确保透明度保持
          magick src/assets/images/icon.svg -background none -resize 256x256 icon-256.png
          magick src/assets/images/icon.svg -background none -resize 128x128 icon-128.png
          magick src/assets/images/icon.svg -background none -resize 64x64 icon-64.png
          magick src/assets/images/icon.svg -background none -resize 48x48 icon-48.png
          magick src/assets/images/icon.svg -background none -resize 32x32 icon-32.png
          magick src/assets/images/icon.svg -background none -resize 16x16 icon-16.png
          magick icon-256.png icon-128.png icon-64.png icon-48.png icon-32.png icon-16.png src/assets/images/icon.ico
          Remove-Item icon-*.png
          
          # 2. 使用Nuitka编译
          python -m nuitka --standalone --enable-plugin=pyqt6 --include-data-dir=src/assets=assets --windows-icon-from-ico=src/assets/images/icon.ico --output-dir=dist --assume-yes-for-downloads src/main.py
          
          # 3. 复制必要文件并准备发布
          if (Test-Path -Path "src/assets") { Copy-Item -Path "src/assets" -Destination "dist/main.dist/assets" -Recurse -Force }
          if (Test-Path -Path "src/core") { Copy-Item -Path "src/core" -Destination "dist/main.dist/core" -Recurse -Force }
          if (Test-Path -Path "src/ui") { Copy-Item -Path "src/ui" -Destination "dist/main.dist/ui" -Recurse -Force }
          
          # 4. 重命名为最终产品名称
          Rename-Item -Path "dist/main.dist" -NewName "GestroKey-windows"
          
          # 5. 打包成zip文件用于Release
          Compress-Archive -Path "dist/GestroKey-windows/*" -DestinationPath "dist/GestroKey-windows.zip" -Force

      - name: 读取版本信息
        id: version_info
        run: |
          # 创建一个临时Python脚本来读取版本信息并避免编码问题
          $script = @'
          import sys
          from src.version import VERSION, CURRENT_VERSION_TYPE, VERSION_TYPE_RELEASE, VERSION_TYPE_PREVIEW, VERSION_TYPE_DEVELOPMENT
          
          # 输出版本号
          print(VERSION)
          
          # 将中文版本类型转换为英文以避免编码问题
          if CURRENT_VERSION_TYPE == "未发布版":
              print("development")
          elif CURRENT_VERSION_TYPE == "预览版":
              print("preview")
          elif CURRENT_VERSION_TYPE == "正式版":
              print("release")
          else:
              print("unknown")
          '@
          
          # 将脚本保存到临时文件
          $script | Out-File -Encoding utf8 temp_version_script.py
          
          # 执行脚本并读取输出
          $version = python temp_version_script.py | Select-Object -First 1
          $version_type = python temp_version_script.py | Select-Object -Skip 1 -First 1
          
          # 删除临时脚本
          Remove-Item temp_version_script.py
          
          # 输出版本信息供后续步骤使用
          echo "VERSION=$version" >> $env:GITHUB_OUTPUT
          
          # 根据英文版本类型判断要创建的release名称和是否为预览版
          if ($version_type -eq "development") {
            echo "VERSION_TYPE=Development Version" >> $env:GITHUB_OUTPUT
            echo "RELEASE_NAME=latest" >> $env:GITHUB_OUTPUT
            echo "IS_PRERELEASE=true" >> $env:GITHUB_OUTPUT
          } elseif ($version_type -eq "preview") {
            echo "VERSION_TYPE=Preview Version" >> $env:GITHUB_OUTPUT
            echo "RELEASE_NAME=$version" >> $env:GITHUB_OUTPUT
            echo "IS_PRERELEASE=true" >> $env:GITHUB_OUTPUT
          } else {
            echo "VERSION_TYPE=Release Version" >> $env:GITHUB_OUTPUT
            echo "RELEASE_NAME=$version" >> $env:GITHUB_OUTPUT
            echo "IS_PRERELEASE=false" >> $env:GITHUB_OUTPUT
          }

      - name: 检查latest标签是否存在
        id: check_tag
        uses: mukunku/tag-exists-action@v1.4.0
        with:
          tag: latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 删除已存在的latest发布
        if: steps.check_tag.outputs.exists == 'true'
        uses: dev-drprasad/delete-tag-and-release@v0.2.1
        with:
          delete_release: true
          tag_name: latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 创建Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ steps.version_info.outputs.RELEASE_NAME }}
          tag_name: ${{ steps.version_info.outputs.RELEASE_NAME }}
          files: dist/GestroKey-windows.zip
          prerelease: ${{ steps.version_info.outputs.IS_PRERELEASE }}
          body: |
            GestroKey ${{ steps.version_info.outputs.VERSION }} ${{ steps.version_info.outputs.VERSION_TYPE }}
            
            由GitHub Actions自动构建于 ${{ github.event.repository.updated_at }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}