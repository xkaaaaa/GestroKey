---
description: 
globs: 
alwaysApply: false
---
## 1. 文件更新与维护

### 1.1 更新前的准备工作
- **阅读源文件**：在进行任何修改之前，必须阅读 `src\README.md` 文件，确保对项目结构和内容有清晰的理解。

### 1.2 文件更新范围
- **全面覆盖**：所有涉及的文件必须同步更新，包括但不限于：
  - `src` 目录下的所有文件
  - 项目中引用的其他文档或配置文件

### 1.3 格式一致性
- **保持原有格式**：在更新文档时，必须仿照原有格式编写。

### 1.4 内容完整性
- **文件结构更新**：如果文件结构发生变化，必须同步更新 `src\README.md` 中的文件结构部分。
- **目录同步**：确保 `src\README.md` 中的目录部分与实际文件目录一致。
- **详细解释**：对新增或修改的文件，必须在 `src\README.md` 中补充详细的解释和说明。

## 2. 修改方式

### 2.1 分步修改
- **小步更新**：每次修改只针对一个文件或一个部分，避免一次性修改过多内容导致错误。

### 2.2 代码规范
- **仿照原有代码习惯**：在修改代码时，必须遵循项目中原有的代码风格和习惯，包括：
  - 缩进方式
  - 变量命名规则
  - 注释风格

## 3. 特殊要求

### 3.1 README.md 的特殊要求
- **明确更新指令**：在接收到明确的更新 `src\README.md`（提及README.md通常指的是src\README.md，除非有特殊指定） 指令时，必须执行以下操作：
  - `src\README.md` 文件
  - 确保文件结构、目录和文件详细解释部分的同步
  - 保持原有格式不变
  - 不自夸：禁止出现任何对功能的赞扬、对亮点的刻意描述，只以客观的态度陈述。

### 3.2 提交规范
- **避免大提交**：尽量避免一次性提交大量修改，建议分多次小提交。

## 4. 其他要求
- **说中文**：始终使用中文交流。
- **验证信息**：在呈现信息之前，始终验证上下文中的信息。不要在没有明确证据的情况下做出假设或推测。
- **逐文件更改**：逐文件进行所有更改，并给用户机会发现错误。
- **不道歉**：不要使用道歉。
- **不提供理解反馈**：避免在评论或文档中提供关于理解的反馈。
- **不建议空白更改**：不要建议更改空白。
- **不提供摘要**：不要提供不必要的更改摘要。只有在用户明确要求简要概述后才进行总结。
- **不发明**：不要发明除明确请求之外的更改。
- **不进行不必要的确认**：不要请求确认已提供在上下文中的信息。
- **保留现有代码**：不要删除不相关的代码或功能。注意保留现有结构。
- **单块编辑**：将所有编辑提供为单块，而不是为同一文件提供多步指令或解释。
- **不检查实现**：不要要求用户验证提供的上下文中可见的实现。但是，如果更改影响功能，提供自动化检查或测试，而不是要求手动验证。
- **不进行不必要的更新**：当没有实际修改需要时，不要建议更新或更改文件。
- **提供真实文件链接**：始终提供真实文件的链接，而不是上下文生成的文件。
- **不讨论当前实现**：除非用户要求或需要解释请求更改的影响，否则不要讨论当前实现。
- **检查上下文生成的文件内容**：记住检查上下文生成的文件以获取当前文件内容和实现。
- **使用明确的变量名**：优先使用描述性、明确的变量名，而不是短而模糊的变量名，以增强代码可读性。
- **遵循一致的编码风格**：遵循项目中现有的编码风格以保持一致性。
- **优先考虑性能**：在建议更改时，考虑并优先考虑代码性能（如果适用）。
- **考虑单一方法**：在修改或建议代码更改时，始终考虑安全影响。
- **测试覆盖**：为新的或修改的代码建议或包括适当的单元测试。
- **错误处理**：在必要时实现健壮的错误处理和日志记录。
- **模块化设计**：鼓励模块化设计原则，以提高代码的可维护性和可重用性。
- **版本兼容性**：在建议更改时，确保它们与项目的特定语言或框架版本兼容。如果出现版本冲突，建议替代方案。
- **避免魔术数字**：将硬编码的值替换为命名常量，以提高代码清晰度和可维护性。
- **考虑边缘情况**：在实现逻辑时，始终考虑并处理可能的边缘情况。
- **使用断言**：在可能的情况下包含断言，以验证假设并尽早捕获潜在错误。